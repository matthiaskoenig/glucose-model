function [d] = model_info(name)
% MODEL_INFO Prints information about model of the given name.
% Performs sanity and completeness check of the submodule.
% Has to be called for all the modules before they are put together.
%
%   author: Matthias Koenig
%   date:   110814
d.name = name;

% Get the modul folder and add to path
folder = strcat('./m_', name, '/')
path(path, folder)

% Get the functions for names, stoichiometry and ode
d.names_v       = create_handle('names_v');
d.names_s       = create_handle('names_s');
d.stoichiometry = create_handle('stoichiometry');
d.pars_init     = create_handle('pars_init');
d.pars          = create_handle('pars');
d.pars_vmax     = create_handle('pars_vmax');
d.model_ode     = create_handle('model_ode');

% Perform general checks on the modul definition
% Call the files for testing
% - if the size of the dimensions is correct for the different files
% - if the Vmax >= 0 (info for zero settings)
% - if the init > 0  (info for the zero settings)
names_v = d.names_v();
names_s = d.names_s();
vmax = d.pars_vmax();
init = d.pars_init();
SM = d.stoichiometry();
[Ns, Nv] = size(SM);
mpars = struct();   % shared parameter structure for the ode file
v_init = d.model_ode(init, 0, mpars);

% Call the tests
test_01()
test_02()
test_03()
test_04()
test_05()
test_06()
%test_07(); % test ODE integration

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function [res] = test_01()
    % test if the right number of Vmax values
        res = 1;
        if size(names_v) ~= size(vmax)
            res = 0;
            error(strcat('Modul: ', name, ...
                ' size names_v() and pars_vmax() mismatch'))
        end
    end

    function [res] = test_02()
    % test if the right number of initial values
        res = 1;
        if size(names_s) ~= size(init)
            res = 0;
            error(strcat('Modul: ', name, ...
                ' size names_s() and pars_init() mismatch'))
        end
    end

    function [res] = test_03()
    % test if negative or zero Vmax values
        res = 1;
        if any(vmax < 0)
            res = 0;
            error(strcat('Modul: ', name, ...
                ' Vmax values < 0, negative fluxes'))
        end
        if any(vmax == 0)
            warning(strcat('Modul: ', name, ...
                ' Vmax values = 0, no flux through reactions'))
        end
    end

    function [res] = test_04()
    % test if negative or zero initial concentrations
        res = 1;
        if any(init < 0)
            res = 0;
            error(strcat('Modul: ', name, ...
                ' Initial concentrations < 0, negative concentrations'))
        end
        if any(init == 0)
            warning(strcat('Modul: ', name, ...
                ' Initial concentrations = 0, zero concentrations'))
        end        
    end

    function [res] = test_05()
    % test if the dimensions of the stoichiometric matrix are in accordance
    % with the Vmax values and initial concentrations
        res = 1;
        if (Nv ~= size(vmax))
            res = 0;
            error(strcat('Modul: ', name, ...
                'dimension mismatch size(Vmax) and stoichiometric matrix'))
        end
        if (Nc ~= size(init))
            res = 0;
            error(strcat('Modul: ', name, ...
                'dimension mismatch size(init) and stoichiometric matrix'))
        end
    end
    
    function [res] = test_06()
    % test if the ode_file returns the fitting number of fluxes 
        res = 1;
        if (size(v_init) ~= Nv)
            error(strcat('Modul: ', name, ...
         'dimension mismatch modul_ode(init,0) and stoichiometric matrix'))
        end
    end

    function [res] = test_07()
        % test integration of the system with the given information
        options = odeset('NonNegative', 1:size(init));
        [t,c] = ode15s(@(t,y) d.model_ode(t, y, mpars), [0 100], init, odeset());
    end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    function [f] = create_handle(f_name)
    % Create the function handle from the given name of the function.
        f = str2func(strcat('m_', name, '_', f_name));
    end

end