function [ ] = sim glucose_lactate_dependency(out_folder)
%% SIM_GLUCOSE_LACTATE_DEPENDENCY Simulate varying lactate and glucose
%% concentrations.

% External lactate and glucose concentrations are set to different values
% and the response of the system after a certain time is store.
% To visualize the results use glucose_lactate_dependency_analysis.
%
% The cases normal, diabetes, insulin_restored and glucagon_restored are
% calculated.
%
% Usage:
% - [1] select out_folder for simulation (in this folder results are
%       stored)
% - [2] select glucose range glycogen range and timespan for simulation 
%       (defines the resolution of the simulation)
%
%   author: Matthias KÃ¶nig (matthias.koenig@charite.de)
%   date:   110211


%% General initialization
format compact
if nargin == 0
    close all
    clear all
end
addpath('/home/mkoenig/Desktop/kinetic_model/insulin_glucagon')
addpath('/home/mkoenig/Desktop/kinetic_model/tools')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simulation Settings
if nargin == 0
    out_folder = '/home/mkoenig/Desktop/kinetic_model_results/simulations/110211_data/glucose_lactate_dependency'
    save(strcat(out_folder, '/tmp'))     % test if possible to save to folder
    %!rm tmp.mat
end

mpars.glc_ext     = 2:0.05:16                 % [mM] variance in glucose 
mpars.lac_ext     = 0.01:0.05:4.1;            % [mM] variance in lactate
mpars.t_end       = 500;                      % [min] integration end time in [min]
mpars.t_stepsize  = 100;                      % stepsize of calculated t values

% Debug information
mpars.debug         = false;

% Basic parameters
mpars.t_span        = 0:mpars.t_stepsize:mpars.t_end;
mpars.S_start       = pars_Sex('overnight_fast');      % initial concentrations
mpars.Vmax          = pars_Vmax('start');              % Vmax values
mpars.stoichiometry = model_stoichiometry();            % stoichiometry

% Hormonal control
% Insulin, glucagon and epinephrine dose response curves
mpars.insulin       = @insulin_f_normal;              % insulin  dose response curve
mpars.glucagon      = @glucagon_f_normal;             % glucagon dose response curve
mpars.epinephrine   = @epinephrine_f_normal;          % epinephrine dose response curve

% Gamma function directly (! if function is specified insulin, glucagon and
% epinephrine are not used ! -> overwrites the hormones)
mpars.gamma = [];

% Concentration settings for simulation
% additional constant concentrations
mpars.const_in_simulation = {
        'glyglc'        17     
};



%% Defining simulation conditions and files
% for the conditions defined here calculate the data and store it in the
% corresponding files
conditions = cellstr({'normal'
                      'diabetes'
                      'insulin_restored'
                      'glucagon_restored'
              });
out_files  = cellstr({strcat(out_folder, '/glucose_lactate_dependency_normal')
                      strcat(out_folder, '/glucose_lactate_dependency_diabetes')
                      strcat(out_folder, '/glucose_lactate_dependency_insulin_restored')
                      strcat(out_folder, '/glucose_lactate_dependency_glucagon_restored')
              });

%% Simulation
% Simulate for all conditions
for c_index=1:length(conditions)
    fprintf('\n*********************************************************\n');
    condition = conditions{c_index}
    out_file  = out_files{c_index}

    % Matrices of fluxes and concentrations
    [c_num, v_num] = size(mpars.stoichiometry);
    c_full = zeros(length(mpars.glc_ext), length(mpars.lac_ext), length(mpars.t_span), c_num);
    v_full = zeros(length(mpars.glc_ext), length(mpars.lac_ext), length(mpars.t_span), v_num);
    const_vec = ones(length(t_span), 1);
    
    % Select the appropriate hormonal response function
    switch condition
        case 'normal'        
            insulin  = @insulin_f_normal;
            glucagon = @glucagon_f_normal;
        case 'diabetes'
            insulin  = @insulin_f_diabetes;
            glucagon = @glucagon_f_diabetes;
        case 'insulin_restored'
            insulin  = @insulin_f_normal;
            glucagon = @glucagon_f_diabetes;
        case 'glucagon_restored'
            insulin  = @insulin_f_diabetes;
            glucagon = @glucagon_f_normal;
    end
    mpars.insulin     = insulin;
    mpars.glucagon    = glucagon;
    
    % Simulate for all glucose and lactate concentrations
    fprintf('\n'), mpars, fprintf('\n')
    count = 1; toc_total = 0;
    count_max = length(mpars.glc_ext)*length(mpars.lac_ext);
    tic
    for k=1:length(glc_ext)
        for q = 1:length(lac_ext)
            
            % information about the loops
            toc_total = toc_total + toc;
            fprintf('%3.2f %%  \t [%6.2f\t->\t%6.2f ] min\n', count/count_max*100, toc/60,  toc/60/k*(count_max-count) );
            count = count + 1; 
            
            % changed initial concentration for simulation
            mpars.changed_initial = {
                'lac_ext'       33      0.8                 % [mM] lactate extern  
                'glc_ext'       32      mpars.glc_ext(k)    % [mM] glucose extern
                'glyglc'        17      250                 % [mM] glycogen equivalent
            }; 

            % Simulate the model with the given settings
            [t, c, v] = model(mpars);

            % Save concentrations and fluxes
            c_full(k, q, :, :) = c;
            v_full(k, q, :, :) = v;
            
            % Set the simulation concentration
            S_start(32) = glc_ext(k);
            S_start(33) = lac_ext(q);
            options.const_c(32,2) = glc_ext(k);
            options.const_c(33,2) = lac_ext(q);
            
            %% Integration for the time dependent concentrations
            [t,c] = ode15s(@(t,y) ode_options_full(t, y, options), t_span, S_start, odeset);
            
            % Set the constant concentrations after the integration
            for p=1:length(const_c_ind)
                c(:, const_c_ind(p)) = const_vec * options.const_c(const_c_ind(p),2); 
            end

            % Save concentrations
            c_full(k,q, :, :) = c;

            % Calculate and save fluxes
            v  = zeros(length(t), v_num);
            td = zeros(length(t), v_num);
            for p=1:length(t)
                [v(p, :), td(p,:)] = glycolysis_full(c(p, :), options);
            end 
            v_full(k, q, :, :) = v;
        end
    end

   % Save the data
   save(out_file, '-v7.3')
   
end